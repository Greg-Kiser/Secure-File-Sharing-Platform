#!/bin/bash
yum update -y
yum install -y aws-cli python3-pip amazon-ssm-agent

# Install CloudWatch Agent
cd /tmp
wget https://s3.amazonaws.com/amazoncloudwatch-agent/amazon_linux/amd64/latest/amazon-cloudwatch-agent.rpm
sudo rpm -Uvh amazon-cloudwatch-agent.rpm

pip3 install spacy boto3
python3 -m spacy download en_core_web_sm

# Start the SSM agent
systemctl start amazon-ssm-agent
systemctl enable amazon-ssm-agent

# Create directories for reports and logs
mkdir -p /home/ec2-user/reports /home/ec2-user/summarized /var/log/myapp
touch /var/log/myapp/process_reports.log

# Create a script to process the files
cat << 'SCRIPT' > /home/ec2-user/process_reports.sh
#!/bin/bash

LOG_FILE="/var/log/myapp/process_reports.log"

# Log start of script
echo "$(date): Starting script with argument: $1" >> $LOG_FILE

# Download the report from the S3 bucket
echo "$(date): Downloading report from S3 bucket" >> $LOG_FILE
aws s3 cp s3://original-medical-reports-gk/$1 /home/ec2-user/reports/ >> $LOG_FILE 2>&1

if [ $? -ne 0 ]; then
  echo "$(date): Failed to download report from S3" >> $LOG_FILE
  exit 1
fi

# Process the report
echo "$(date): Processing report" >> $LOG_FILE
python3 -c "
import spacy
nlp = spacy.load('en_core_web_sm')
with open('/home/ec2-user/reports/$1', 'r') as file:
    text = file.read()
doc = nlp(text)
summary = ' '.join([sent.text for sent in doc.sents][:5])  # Simple summarization
with open('/home/ec2-user/summarized/$1', 'w') as out_file:
    out_file.write(summary)
" >> $LOG_FILE 2>&1

if [ $? -ne 0 ]; then
  echo "$(date): Failed to process report" >> $LOG_FILE
  exit 1
fi

# Upload the summarized report to the S3 bucket
echo "$(date): Uploading summarized report to S3 bucket" >> $LOG_FILE
aws s3 cp /home/ec2-user/summarized/$1 s3://summarized-medical-reports-gk/ >> $LOG_FILE 2>&1

if [ $? -ne 0 ]; then
  echo "$(date): Failed to upload summarized report to S3" >> $LOG_FILE
  exit 1
fi

# Clean up
echo "$(date): Cleaning up" >> $LOG_FILE
rm /home/ec2-user/reports/$1 /home/ec2-user/summarized/$1 >> $LOG_FILE 2>&1

if [ $? -ne 0 ]; then
  echo "$(date): Cleanup failed" >> $LOG_FILE
  exit 1
fi

# Log end of script
echo "$(date): Completed processing report: $1" >> $LOG_FILE
SCRIPT

# Make the script executable
chmod +x /home/ec2-user/process_reports.sh

# Create CloudWatch Agent configuration file
mkdir -p /opt/aws/amazon-cloudwatch-agent/etc

cat << 'EOF' > /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.toml
[agent]
  collection_jitter = "0s"
  debug = false
  flush_interval = "1s"
  flush_jitter = "0s"
  hostname = ""
  interval = "60s"
  logfile = "/var/log/amazon-cloudwatch-agent/amazon-cloudwatch-agent.log"
  logtarget = "lumberjack"
  metric_batch_size = 1000
  metric_buffer_limit = 10000
  omit_hostname = false
  precision = ""
  quiet = false
  round_interval = false

[inputs]

  [[inputs.logfile]]
    destination = "cloudwatchlogs"
    file_state_folder = "/opt/aws/amazon-cloudwatch-agent/logs/state"

    [[inputs.logfile.file_config]]
      file_path = "/var/log/messages"
      from_beginning = true
      log_group_class = ""
      log_group_name = "/ec2/logs"
      log_stream_name = "{instance_id}/messages"
      pipe = false
      retention_in_days = -1
      timezone = "UTC"

    [[inputs.logfile.file_config]]
      file_path = "/var/log/myapp/process_reports.log"
      from_beginning = true
      log_group_class = ""
      log_group_name = "/ec2/logs"
      log_stream_name = "{instance_id}/process_reports"
      pipe = false
      retention_in_days = -1
      timezone = "UTC"

[outputs]

  [[outputs.cloudwatchlogs]]
    force_flush_interval = "5s"
    log_stream_name = "{instance_id}"
    mode = "EC2"
    region = "us-east-1"
    region_type = "EC2M"
EOF

# Create log directories if they do not exist
mkdir -p /var/log/amazon-cloudwatch-agent
mkdir -p /var/log/cloudwatch-agent-status

# Start the CloudWatch Agent and log the output
/opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -c file:/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.toml -s >> /var/log/amazon-cloudwatch-agent/agent.log 2>&1

# Check if the CloudWatch Agent started successfully
if systemctl is-active --quiet amazon-cloudwatch-agent; then
    echo "CloudWatch Agent started successfully." >> /var/log/cloudwatch-agent-status.log
else
    echo "CloudWatch Agent failed to start." >> /var/log/cloudwatch-agent-status.log
    systemctl status amazon-cloudwatch-agent >> /var/log/cloudwatch-agent-status.log
fi
